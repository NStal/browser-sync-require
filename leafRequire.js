// Generated by CoffeeScript 1.6.3
(function() {
  var LeafRequire, Script,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  LeafRequire = {};

  Script = (function() {
    Script.scripts = [];

    Script.dict = {};

    Script.fullNameDict = {};

    function Script(url) {
      this.url = url;
      this.ready = false;
      this.fullName = url.replace(/\?.*/ig, "");
      this.exports = null;
      if (this.fullName.lastIndexOf("/") >= 0) {
        this.name = this.fullName.substring(this.fullName.lastIndexOf("/") + 1);
      } else {
        this.name = this.fullName;
      }
      Script.scripts.push(this);
      Script.dict[this.name] = this;
      Script.fullNameDict[this.fullName] = this;
    }

    Script.prototype.load = function(callback) {
      var json,
        _this = this;
      this.callback = callback;
      json = JSON.parse(localStorage.getItem("leaf-require-script-" + this.name) || "{}");
      if (LeafRequire.enableCache && json.url === this.url) {
        console.log("" + this.fullName + " in cache");
        return this.setScript(json.script);
      } else {
        console.log("fetch " + this.fullName);
        return LeafRequire.getRemoteScript(this.url, function(err, script) {
          if (err) {
            _this.callback(err);
            return;
          }
          _this.setScript(script);
          return _this.save();
        });
      }
    };

    Script.prototype._ready = function() {
      if (this.callback) {
        this.callback(null, this);
      }
      return this.isReady = true;
    };

    Script.prototype.save = function() {
      return localStorage.setItem("leaf-require-script-" + this.name, this.toString());
    };

    Script.prototype.toString = function() {
      return JSON.stringify({
        url: this.url,
        script: this.script
      });
    };

    Script.prototype.require = function() {
      this.exports = this._require(this.exports);
      return this.exports;
    };

    Script.prototype.setScript = function(script) {
      var insertScript, tag, wrapper;
      this.script = script;
      wrapper = "LeafRequire.Script.fullNameDict[\"{fullName}\"]._require = function(exports){\n    if(exports) return exports;\n    else exports = {};\n    (function(exports){\n        var global = window;\n        {code};\n    })(exports);\n    return exports;\n}\nLeafRequire.Script.fullNameDict[\"{fullName}\"]._ready()";
      insertScript = wrapper.replace(/{fullName}/g, this.fullName).replace("{code}", this.script);
      this.src = URL.createObjectURL(new Blob([insertScript], {
        type: "text/javascript"
      }));
      tag = document.createElement("script");
      tag.src = this.src;
      return document.body.appendChild(tag);
    };

    return Script;

  })();

  LeafRequire.Script = Script;

  LeafRequire.requirements = [];

  LeafRequire.use = function() {
    var args, url, _i, _len, _results;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      url = args[_i];
      _results.push(LeafRequire.requirements.push(url));
    }
    return _results;
  };

  LeafRequire.getRemoteScript = function(url, callback) {
    var xhr,
      _this = this;
    xhr = new XMLHttpRequest();
    xhr.open("GET", url, true);
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        return callback(null, xhr.responseText);
      }
    };
    xhr.send();
    return xhr;
  };

  LeafRequire.require = function(name) {
    var script;
    script = Script.dict[name] || Script.fullNameDict[name];
    if (!script) {
      throw "module " + name + " not found";
    }
    return script.require();
  };

  LeafRequire.init = function(entry, callback) {
    var counter, ready, total, url, _, _i, _len, _ref, _results,
      _this = this;
    ready = function() {
      callback();
      return LeafRequire.require(entry);
    };
    LeafRequire.entry = entry;
    if (__indexOf.call(LeafRequire.requirements, entry) < 0) {
      LeafRequire.requirements.push(entry);
    }
    counter = 0;
    total = LeafRequire.requirements.length;
    _ref = LeafRequire.requirements;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      url = _ref[_i];
      _ = new Script(url);
      _results.push(_.load(function(err, script) {
        console.log("script load ready", script.fullName);
        if (err) {
          console.error("fail to load script", script);
          throw "fail to load script";
        }
        counter++;
        if (counter === total) {
          return ready();
        }
      }));
    }
    return _results;
  };

  window.LeafRequire = LeafRequire;

  window.require = LeafRequire.require;

}).call(this);
