// Generated by CoffeeScript 1.7.1
(function() {
  
/**
 * Implementation of base URI resolving algorithm in rfc2396.
 * - Algorithm from section 5.2
 *   (ignoring difference between undefined and '')
 * - Regular expression from appendix B
 * - Tests from appendix C
 *
 * @param {string} uri the relative URI to resolve
 * @param {string} baseuri the base URI (must be absolute) to resolve against
 */

URI = function(){
    function resolveUri(sUri, sBaseUri) {
	if (sUri == '' || sUri.charAt(0) == '#') return sUri;
	var hUri = getUriComponents(sUri);
	if (hUri.scheme) return sUri;
	var hBaseUri = getUriComponents(sBaseUri);
	hUri.scheme = hBaseUri.scheme;
	if (!hUri.authority) {
	    hUri.authority = hBaseUri.authority;
	    if (hUri.path.charAt(0) != '/') {
		aUriSegments = hUri.path.split('/');
		aBaseUriSegments = hBaseUri.path.split('/');
		aBaseUriSegments.pop();
		var iBaseUriStart = aBaseUriSegments[0] == '' ? 1 : 0;
		for (var i in aUriSegments) {
		    if (aUriSegments[i] == '..')
			if (aBaseUriSegments.length > iBaseUriStart) aBaseUriSegments.pop();
		    else { aBaseUriSegments.push(aUriSegments[i]); iBaseUriStart++; }
		    else if (aUriSegments[i] != '.') aBaseUriSegments.push(aUriSegments[i]);
		}
		if (aUriSegments[i] == '..' || aUriSegments[i] == '.') aBaseUriSegments.push('');
		hUri.path = aBaseUriSegments.join('/');
	    }
	}
	var result = '';
	if (hUri.scheme   ) result += hUri.scheme + ':';
	if (hUri.authority) result += '//' + hUri.authority;
	if (hUri.path     ) result += hUri.path;
	if (hUri.query    ) result += '?' + hUri.query;
	if (hUri.fragment ) result += '#' + hUri.fragment;
	return result;
    }
    uriregexp = new RegExp('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?');
    function getUriComponents(uri) {
	var c = uri.match(uriregexp);
	return { scheme: c[2], authority: c[4], path: c[5], query: c[7], fragment: c[9] };
    }
    var URI = {}
    URI.resolve = function(base,target){
        return resolveUri(target,base);
    }
    URI.normalize = function(url){
        return URI.resolve("",url);
    }
    return {URI:URI}
}();
  var Context, Script,
    __slice = [].slice;

  Context = (function() {
    Context.id = 0;

    Context.instances = [];

    Context.getContext = function(id) {
      return this.instances[id];
    };

    function Context(option) {
      if (option == null) {
        option = {};
      }
      this.scripts = [];
      this.root = option.root || "./";
      this.ready = false;
      this.id = Context.id++;
      this.globalName = "LeafRequire";
      this.useObjectUrl = false;
      Context.instances[this.id] = this;
    }

    Context.prototype.use = function() {
      var files, path, _i, _len, _results;
      files = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        path = files[_i];
        _results.push(this.scripts.push(new Script(this, path)));
      }
      return _results;
    };

    Context.prototype.getScript = function(path) {
      var script, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.scripts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        script = _ref[_i];
        if (script.scriptPath === path) {
          return script;
        }
      }
      if (path.lastIndexOf(".js") !== path.length - ".js".length) {
        _ref1 = this.scripts;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          script = _ref1[_j];
          if (script.scriptPath === path + ".js") {
            return script;
          }
        }
      }
      return null;
    };

    Context.prototype.getRequire = function(path) {
      var script;
      script = this.getScript(path);
      return function(_path) {
        return script.require(_path);
      };
    };

    Context.prototype.setRequire = function(path, module, exports, __require) {
      var script;
      script = this.getScript(path);
      return script.setRequire(module, exports, __require);
    };

    Context.prototype.require = function(path, fromScript) {
      var realPath, script, url;
      url = URI.URI;
      if (fromScript) {
        realPath = url.resolve(fromScript.scriptPath, path);
      } else {
        realPath = url.normalize(path);
      }
      if (realPath.indexOf("/") === 0) {
        realPath = realPath.substring(1);
      }
      script = this.getScript(realPath);
      if (!script) {
        console.log(this.scripts);
        throw new Error("module " + realPath + " not found");
      }
      return script.beRequired();
    };

    Context.prototype.load = function(callback) {
      return this.scripts.forEach((function(_this) {
        return function(script) {
          return script.load(function(err) {
            var allReady;
            if (err) {
              throw new Error("fail to load script " + script.loadPath);
            }
            allReady = _this.scripts.every(function(item) {
              if (!item.isReady) {
                return false;
              }
              return true;
            });
            if (allReady) {
              return callback();
            }
          });
        };
      })(this));
    };

    return Context;

  })();

  Script = (function() {
    function Script(context, path) {
      var url;
      this.context = context;
      this.path = path;
      url = URI.URI;
      this.scriptPath = url.normalize(this.path);
      this.loadPath = url.resolve(this.context.root, this.path);
    }

    Script.prototype.require = function(path) {
      return this.context.require(path, this);
    };

    Script.prototype.setRequire = function(module, exports, __require) {
      this._module = module;
      this._exports = exports;
      this._require = __require;
      this.isReady = true;
      if (this._loadCallback) {
        return this._loadCallback();
      }
    };

    Script.prototype.beRequired = function() {
      if (this.exports) {
        return this.exports;
      }
      if (this._isRequiring) {
        return this._module.exports;
      }
      this._isRequiring = true;
      this._require();
      this._isRequiring = false;
      if (this._exports !== this._module.exports) {
        this._exports = this._module.exports;
      }
      this.exports = this._exports;
      return this.exports;
    };

    Script.prototype.load = function(callback) {
      var XHR;
      this._loadCallback = callback;
      XHR = new XMLHttpRequest();
      XHR.open("GET", this.loadPath, true);
      XHR.onreadystatechange = (function(_this) {
        return function(err) {
          if (XHR.readyState === 4) {
            return _this.parse(XHR.responseText);
          }
        };
      })(this);
      return XHR.send();
    };

    Script.prototype.parse = function(scriptContent) {
      var code, codeObjectUrl, script;
      script = document.createElement("script");
      code = "(function(){\n    var require = " + this.context.globalName + ".getContext(" + this.context.id + ").getRequire('" + this.scriptPath + "')\n    var module = {exports:{}};\n    var exports = module.exports\n    var global = window;\n    var __require = function(){\n\n// " + this.scriptPath + "\n// BY leaf-require\n" + scriptContent + "\n\n    }\n    " + this.context.globalName + ".getContext(" + this.context.id + ").setRequire('" + this.scriptPath + "',module,exports,__require)\n})()\n";
      if (this.context.useObjectUrl) {
        codeObjectUrl = URL.createObjectURL(new Blob([code], {
          type: "text/javascript"
        }));
        script.src = codeObjectUrl + ("#" + this.scriptPath);
      } else {
        script.innerHTML = code;
      }
      return document.body.appendChild(script);
    };

    return Script;

  })();

  window.LeafRequire = Context;

}).call(this);
